"""
This file has 2 purposes:

1. test if the new version of the class SensorSimulator behaves the same way
than the previous class SensorSimulator
2.  test the class GenericSensorSimulator

The file is separated in 2 parts
1st, we test if the class SensorSimulator has the same output than the previous version
(by comparing the previous output that we stored)  at the condition that the file
used in both is the same (data/sentinel2.rsr)
Warning: data/sentinel2.rsr is an old version of the RSR

2st, we test if our class GenericSensorSimulator itself is running without error
Then, we compare if the simulation gives the expected result, ie,
we compare the output with a referenced data
NB: This reference data has been generated by a simulation
"""

from pathlib import Path

import numpy as np
import pandas as pd
import torch
import pytest
from prosailvae.decoders import ProsailSimulatorDecoder
from prosailvae.ProsailSimus import (
    GenericSensorSimulator,
    ProsailSimulator,
    SensorSimulator,
    read_rsr,
)

# 1st part
# Compare with previous output
# Just to ensure that everything behaves as previsously


def get_ref_data(file_name: str, batch_size: int = 10) -> torch.Tensor:
    assert batch_size <= 100
    data: torch.Tensor = torch.load(
        f"{Path(__file__).parent}/../data/{file_name}"
    ).float()[:batch_size]
    return data


def prosail_params(batch_size: int = 10) -> torch.Tensor:
    return get_ref_data("prosail_sim_vars.pt", batch_size)


def prosail_full_simus_ref(batch_size: int = 10):
    return get_ref_data("prosail_simus_full.pt", batch_size)


def s2_simus_dummy_ref(batch_size: int = 10):
    return get_ref_data("s2_simus_dummy.pt", batch_size)


def s2_simus_dummy_ref_old(batch_size: int = 10):
    return get_ref_data("s2_simus_dummy_old_version.pt", batch_size)


def dummy_latent(batch_size: int = 10, nb_samples: int = 10) -> torch.Tensor:
    nb_latents = 11
    return torch.randn(batch_size, nb_latents, nb_samples)


def dummy_angles(batch_size: int = 10) -> torch.Tensor:
    tts = torch.randint(low=25, high=70, size=(batch_size,)).float()
    tto = torch.randint(low=-14, high=14, size=(batch_size,)).float()
    relaz = torch.randint(low=0, high=360, size=(batch_size,)).float()
    return torch.stack([tts, tto, relaz], dim=1)


def test_function_read_rsr():
    rsr_file = f"{Path(__file__).parent}/../data/sentinel2.rsr"
    lambdas, rsr = read_rsr(rsr_file)
    assert not torch.isnan(rsr).any()


def test_generic_sensor_simulator_from_rsr_file() -> None:
    """Simulate random spectra from dummy full spectra
    Check if GenericSensorSimulator can handle a file path as input
    As input we give an old version of the rsr file, which
    was used previsously. Then we compare with an outdated reference
    simulation.
    """
    batch_size = 10
    prospect_range = (400, 2500)
    prospect_size = prospect_range[1] - prospect_range[0] + 1
    ref_data = s2_simus_dummy_ref_old(batch_size)
    dummy_spectra = prosail_full_simus_ref(batch_size)[:, :prospect_size]

    # test if we can handle rsr file
    rsr_file = f"{Path(__file__).parent}/../data/sentinel2.rsr"
    lambdas, rsr = read_rsr(rsr_file)
    simulator = GenericSensorSimulator(lambdas, rsr, prospect_range)
    s_simu = simulator(dummy_spectra)
    s_simu = s_simu.to(torch.float32)
    assert not torch.isnan(s_simu).any()
    assert torch.isclose(s_simu, ref_data).all()

    # test if we can handle specific bands
    bands = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    simulator = GenericSensorSimulator(lambdas, rsr, prospect_range, bands=bands)
    s_simu = simulator(dummy_spectra)
    s_simu = s_simu.to(torch.float32)
    assert not torch.isnan(s_simu).any()
    assert torch.isclose(s_simu, ref_data).all()

    # test if we can handle tensor (with old data)
    data = pd.read_csv(
        rsr_file,
        sep=r"\s+",
        header=None,
        usecols=[0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    )
    data = torch.tensor(data.values)
    data = np.transpose(data)
    simulator = GenericSensorSimulator(data[0], data[1:], prospect_range)
    s_simu = simulator(dummy_spectra)
    s_simu = s_simu.to(torch.float32)
    assert not torch.isnan(s_simu).any()
    assert torch.isclose(s_simu, ref_data).all()


# 2nd part


def simulate_random_srf(lambdas):
    """
    Simulate a random SRF
    """
    random_values = torch.rand(len(lambdas), 5)
    sensor_answer = np.transpose(
        torch.cat((lambdas.unsqueeze(1), random_values), dim=1)
    )
    return sensor_answer


@pytest.mark.parametrize(
    "lambdas",
    [
        torch.arange(600 / 1000, 2400 / 1000 + 0.001, 0.001),
        torch.arange(300 / 1000, 3000 / 1000 + 0.001, 0.001),
    ],
)
def test_any_sensor_rdm(lambdas) -> None:
    """Simulate spectra from dummy full spectra and random SRF"""
    batch_size = 10
    prospect_range = (400, 2500)
    prospect_size = prospect_range[1] - prospect_range[0] + 1
    simulator = GenericSensorSimulator(
        simulate_random_srf(lambdas)[0],
        simulate_random_srf(lambdas)[1:],
        prospect_range,
    )
    dummy_spectra = prosail_full_simus_ref(batch_size)[:, :prospect_size]
    s_simu = simulator(dummy_spectra)
    s_simu = s_simu.to(torch.float32)
    assert not torch.isnan(s_simu).any()


def test_any_sensor_from_tensor() -> None:
    """Simulate S2 spectra from dummy full spectra"""
    batch_size = 10
    prospect_range = (400, 2500)
    prospect_size = prospect_range[1] - prospect_range[0] + 1
    newer_version = f"{Path(__file__).parent}/../data/Sentinel2_SRF_2024_4.0.xlsx"
    df_new_version_s2a = pd.read_excel(
        newer_version, sheet_name="Spectral Responses (S2A)", header=None, skiprows=1
    )
    rsr = torch.Tensor(df_new_version_s2a.values)
    rsr = np.transpose(rsr)
    rsr[0] = rsr[0] / 1000
    print("rsr_shape =", rsr.shape)
    simulator = GenericSensorSimulator(rsr[0], rsr[1:], prospect_range)
    dummy_spectra = prosail_full_simus_ref(batch_size)[:, :prospect_size]
    print("dummy_spectra=", dummy_spectra)
    print("dummy spectra shape=", dummy_spectra.shape)
    s2_simu = simulator(dummy_spectra)
    s2_simu = s2_simu.to(torch.float32)
    ref_data = s2_simus_dummy_ref(batch_size)
    assert torch.isclose(s2_simu, ref_data).all()

    # Here we check that the parameter R_down is working
    # For that we need to adapt the size of the prosail simulation
    simulator = GenericSensorSimulator(rsr[0], rsr[1:], prospect_range, R_down=4)
    dummy_spectra = prosail_full_simus_ref(batch_size)[:, :525]
    s2_simu = simulator(dummy_spectra)
    assert not torch.isnan(s2_simu).any()


@pytest.mark.parametrize(
    "lambdas",
    [
        torch.arange(600 / 1000, 2400 / 1000 + 0.001, 0.001),
        torch.arange(300 / 1000, 3000 / 1000 + 0.001, 0.001),
    ],
)
def test_any_simulator_decoder(lambdas) -> None:
    """Test if SensorSimulator works with the decoder"""
    batch_size = 10
    prospect_range = (400, 2500)
    simus = simulate_random_srf(lambdas)
    sensor = GenericSensorSimulator(simus[0], simus[1:], prospect_range)
    prosail = ProsailSimulator()
    decoder = ProsailSimulatorDecoder(prosail, sensor)
    latent = dummy_latent(batch_size)
    angles = dummy_angles(batch_size)
    recons = decoder.decode(latent, angles)
    assert recons is not None


@pytest.mark.parametrize(
    ("bands"),
    [
        None,
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    ],
)
def test_sensor_simulator_from_rsr_file(bands) -> None:
    """Simulate random spectra from dummy full spectra
    Check if GenericSensorSimulator can handle a file path as input
    As input we give an old version of the rsr file, which
    was used previsously. Then we compare with an outdated reference
    simulation.
    """
    batch_size = 10
    prospect_range = (400, 2500)
    prospect_size = prospect_range[1] - prospect_range[0] + 1
    ref_data = s2_simus_dummy_ref_old(batch_size)
    dummy_spectra = prosail_full_simus_ref(batch_size)[:, :prospect_size]

    # test if we can handle rsr file
    rsr_file = f"{Path(__file__).parent}/../data/sentinel2.rsr"
    simulator = SensorSimulator(rsr_file, prospect_range, bands=bands)
    s_simu = simulator(dummy_spectra)
    s_simu = s_simu.to(torch.float32)
    assert not torch.isnan(s_simu).any()
    assert torch.isclose(s_simu, ref_data).all()
